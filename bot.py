import telebot
from telebot import types
import os
import json
import yt_dlp
from dotenv import load_dotenv
import requests

# .env ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡¶æ‡¶ü‡¶æ ‡¶≤‡ßã‡¶°
load_dotenv()
BOT_TOKEN = os.getenv('MAIN_BOT_TOKEN')
REPORT_BOT_TOKEN = os.getenv('REPORT_BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
CHANNEL_ID = os.getenv('CHANNEL_ID')
GOOGLE_AI_KEY = os.getenv('GOOGLE_AI_KEY')

# ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶Ö‡¶®/‡¶Ö‡¶´ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ
ENABLE_GROUPS = os.getenv('ENABLE_GROUPS', 'True') == 'True'
ENABLE_QUALITY_SELECTION = os.getenv('ENABLE_QUALITY_SELECTION', 'True') == 'True'
ENABLE_AUDIO_VIDEO_SELECTION = os.getenv('ENABLE_AUDIO_VIDEO_SELECTION', 'True') == 'True'

# ‡¶¨‡¶ü ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
bot = telebot.TeleBot(BOT_TOKEN)
report_bot = telebot.TeleBot(REPORT_BOT_TOKEN)

USER_DATA_FILE = "utils/user_data.json"

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶°
def load_user_data():
    if not os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, "w") as f:
            json.dump({}, f)
    with open(USER_DATA_FILE, "r") as f:
        return json.load(f)

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßá‡¶≠
def save_user_data(data):
    with open(USER_DATA_FILE, "w") as f:
        json.dump(data, f, indent=4)

# ‡¶ï‡ßü‡ßá‡¶® ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ
def update_user_coins(user_id, coins):
    data = load_user_data()
    user_id = str(user_id)
    if user_id not in data:
        data[user_id] = {"coins": 20, "referrals": 0}  # ‡¶ì‡ßü‡ßá‡¶≤‡¶ï‡¶æ‡¶Æ ‡¶¨‡ßã‡¶®‡¶æ‡¶∏
    data[user_id]["coins"] += coins
    save_user_data(data)

def get_user_coins(user_id):
    data = load_user_data()
    return data.get(str(user_id), {}).get("coins", 0)

# ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶∂‡¶ø‡¶™ ‡¶ö‡ßá‡¶ï
def is_user_member(user_id):
    try:
        member = bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

# ‡¶ó‡ßÅ‡¶ó‡¶≤ ‡¶è‡¶Ü‡¶á ‡¶∏‡ßç‡¶ü‡ßÅ‡¶°‡¶ø‡¶ì‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶Ü‡¶®‡¶æ
def get_ai_response(message):
    url = "https://generativelanguage.googleapis.com/v1/models/chat-bison-001:generateText"
    headers = {"Content-Type": "application/json"}
    params = {"key": GOOGLE_AI_KEY}
    data = {"prompt": message, "max_tokens": 150}
    
    response = requests.post(url, headers=headers, params=params, json=data)
    if response.status_code == 200:
        return response.json().get("candidates", [{}])[0].get("output", "‡¶Ü‡¶Æ‡¶ø ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø‡•§")
    return "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶™‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"

# ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def download_video(url, quality="best"):
    ydl_opts = {
        "format": quality,
        "outtmpl": "downloads/%(title)s.%(ext)s",
        "noplaylist": True
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info_dict = ydl.extract_info(url, download=True)
        file_path = ydl.prepare_filename(info_dict)
    return file_path

# üìå /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    update_user_coins(user_id, 0)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üé• Download", "üë§ My Account", "üéÅ Daily Bonus", "üì¢ Refer")
    
    bot.send_message(message.chat.id, "üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:", reply_markup=markup)

# üé• Download ‡¶Ö‡¶™‡¶∂‡¶®
@bot.message_handler(func=lambda message: message.text == "üé• Download")
def ask_for_link(message):
    bot.send_message(message.chat.id, "üîó ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶®:")

@bot.message_handler(func=lambda message: message.text.startswith("http"))
def process_link(message):
    user_id = message.from_user.id
    
    if not is_user_member(user_id):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üî• Join Now üî•", url=f"https://t.me/{CHANNEL_ID}"))
        markup.add(types.InlineKeyboardButton("‚úÖ Joined", callback_data="joined"))
        bot.send_message(message.chat.id, "üîî ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶®!", reply_markup=markup)
        return
    
    if get_user_coins(user_id) < 5:
        bot.send_message(message.chat.id, "üö´ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶ï‡ßü‡ßá‡¶® ‡¶®‡ßá‡¶á!")
        return
    
    url = message.text
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üé• Fast Download", callback_data=f"fast|{url}"))
    markup.add(types.InlineKeyboardButton("üì• Slow Download", callback_data=f"slow|{url}"))
    
    bot.send_message(message.chat.id, "üîΩ ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("fast") or call.data.startswith("slow"))
def download_callback(call):
    data = call.data.split("|")
    mode = data[0]
    url = data[1]
    
    bot.edit_message_text("‚è≥ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...", call.message.chat.id, call.message.message_id)
    
    try:
        file_path = download_video(url)
        
        if mode == "fast":
            bot.edit_message_text(f"‚úÖ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®! üîó [‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶Ç‡¶ï]({file_path})", call.message.chat.id, call.message.message_id, parse_mode="Markdown")
        else:
            bot.send_message(call.message.chat.id, "üì§ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
            bot.send_document(call.message.chat.id, open(file_path, "rb"))
        
        update_user_coins(call.from_user.id, -5)
    except Exception as e:
        bot.send_message(call.message.chat.id, "‚ùå ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•! ‡¶™‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        report_bot.send_message(ADMIN_CHAT_ID, f"‚ùó ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶á‡¶∞‡¶∞:\n{str(e)}")

# ‚úÖ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ‡ßá‡¶∂‡¶®
@bot.callback_query_handler(func=lambda call: call.data == "joined")
def verify_join(call):
    if is_user_member(call.from_user.id):
        bot.edit_message_text("‚úÖ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ‡¶°! ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§", call.message.chat.id, call.message.message_id)
    else:
        bot.answer_callback_query(call.id, "‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶®‡ßã ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø!")

# üìå ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ó‡ßÅ‡¶ó‡¶≤ ‡¶è‡¶Ü‡¶á ‡¶∏‡ßç‡¶ü‡ßÅ‡¶°‡¶ø‡¶ì ‡¶¶‡¶ø‡ßü‡ßá
@bot.message_handler(func=lambda message: True)
def handle_ai_chat(message):
    response = get_ai_response(message.text)
    bot.send_message(message.chat.id, response)

# ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ
bot.polling()
